/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package to.pkgdo.listms.view;

import java.awt.Image;
import java.io.ByteArrayInputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.Date;
import javax.imageio.ImageIO;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import to.pkgdo.listms.database.DBConnection;

/**
 *
 * @author USER
 */
public class TaskManager extends javax.swing.JInternalFrame {
private String selectedCriteria = "ID"; // Default sorting criteria
private String selectedOrder = "ASC";   // Default sorting order
    /**
     * Creates new form AddTask
     */
    public TaskManager() {
        initComponents();
         this.setBorder(javax.swing.BorderFactory.createEmptyBorder(0,0,0,0));
        
        BasicInternalFrameUI bi = (BasicInternalFrameUI)this.getUI();
        bi.setNorthPane(null);
        tableLoard();
        lblID.setText("");
        
    }
    
    


    
    
    
    private void loadTableData() {
    // Clear existing data in the table
    DefaultTableModel model = (DefaultTableModel) tblItem.getModel();
    model.setRowCount(0);

    // Perform database query with selectedCriteria and selectedOrder
    Connection con = null;
    PreparedStatement pst = null;
    ResultSet rs = null;

    try {
        con = DBConnection.getConnection();
        String sql = "SELECT * FROM task ORDER BY " + selectedCriteria;
        if (selectedCriteria.equals("ID") && selectedOrder.equals("ASC")) {
            sql += " ASC";  // Arrange in ascending order by ID
        } else {
            sql += " " + selectedOrder;
        }
        pst = con.prepareStatement(sql);
        rs = pst.executeQuery();

        while (rs.next()) {
            // Populate data into the table model
            model.addRow(new Object[]{
                rs.getInt("id"),
                rs.getString("title"),
                rs.getString("description"),
                rs.getDate("startDate"),
                rs.getDate("dueDate"),
                rs.getString("currentStates")
            });
        }

    } catch (SQLException ex) {
        ex.printStackTrace();
    } 
    
}

    
     private void playnotificationMusic() {
    try {
        // Load the audio file
        AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(getClass().getResource("/Music/Outlook notification sound.wav"));

        // Create a clip to play the audio
        Clip clip = AudioSystem.getClip();
        clip.open(audioInputStream);

        // Play the audio once
        clip.start();
    } catch (Exception e) {
        e.printStackTrace();
    }
}
     
      private DefaultTableModel resultSetToTableModel(ResultSet rs) throws SQLException {
    ResultSetMetaData metaData = rs.getMetaData();

    // Get column names
    int columnCount = metaData.getColumnCount();
    String[] columnNames = new String[columnCount];
    for (int i = 1; i <= columnCount; i++) {
        columnNames[i - 1] = metaData.getColumnName(i);
    }

    // Get row data
    DefaultTableModel tableModel = new DefaultTableModel(columnNames, 0);
    while (rs.next()) {
        Object[] rowData = new Object[columnCount];
        for (int i = 1; i <= columnCount; i++) {
            rowData[i - 1] = rs.getObject(i);
        }
        tableModel.addRow(rowData);
    }

    return tableModel;
}
    
    private void tableLoard(){
       
        try{
        String sql = "SELECT id, title, description, startDate, dueDate, currentStates FROM task";
        Connection con = DBConnection.getConnection();
        PreparedStatement pst = con.prepareStatement(sql);
        ResultSet rs = pst.executeQuery();
        DefaultTableModel tableModel = resultSetToTableModel(rs);
        tblItem.setModel(tableModel);
        
        // Close the resources
        rs.close();
        pst.close();
       
    } catch (SQLException e) {
        playnotificationMusic();
        JOptionPane.showMessageDialog(this, "Error occurred while loading data: " + e.getMessage());
    }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel1 = new java.awt.Panel();
        label8 = new java.awt.Label();
        jLabel4 = new javax.swing.JLabel();
        rSMaterialButtonRectangle10 = new rojerusan.RSMaterialButtonRectangle();
        rSMaterialButtonRectangle11 = new rojerusan.RSMaterialButtonRectangle();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblItem = new rojerusan.RSTableMetro();
        rSMaterialButtonRectangle12 = new rojerusan.RSMaterialButtonRectangle();
        label25 = new java.awt.Label();
        radioButtonDescending = new javax.swing.JRadioButton();
        radioButtonAscending = new javax.swing.JRadioButton();
        cmbSorting = new javax.swing.JComboBox<>();
        label26 = new java.awt.Label();
        label27 = new java.awt.Label();
        label28 = new java.awt.Label();
        label24 = new java.awt.Label();
        lblID = new java.awt.Label();
        label29 = new java.awt.Label();
        txtDescription = new rojerusan.RSMetroTextPlaceHolder();
        txtTitle = new rojerusan.RSMetroTextPlaceHolder();
        dateChooserstartDate = new com.toedter.calendar.JDateChooser();
        dateChooserDueDate = new com.toedter.calendar.JDateChooser();
        label30 = new java.awt.Label();
        cmbStatus = new javax.swing.JComboBox<>();

        panel1.setBackground(new java.awt.Color(0, 0, 51));
        panel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        label8.setBackground(new java.awt.Color(0, 0, 51));
        label8.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        label8.setForeground(new java.awt.Color(0, 255, 255));
        label8.setText("Task Manager");
        panel1.add(label8, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 30, -1, -1));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/time-management (2).png"))); // NOI18N
        panel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 10, 70, -1));

        rSMaterialButtonRectangle10.setBackground(new java.awt.Color(102, 102, 102));
        rSMaterialButtonRectangle10.setForeground(new java.awt.Color(0, 255, 255));
        rSMaterialButtonRectangle10.setText("Done");
        rSMaterialButtonRectangle10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rSMaterialButtonRectangle10ActionPerformed(evt);
            }
        });
        panel1.add(rSMaterialButtonRectangle10, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 460, 130, 40));

        rSMaterialButtonRectangle11.setBackground(new java.awt.Color(102, 102, 102));
        rSMaterialButtonRectangle11.setForeground(new java.awt.Color(0, 255, 255));
        rSMaterialButtonRectangle11.setText("Delete");
        rSMaterialButtonRectangle11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rSMaterialButtonRectangle11ActionPerformed(evt);
            }
        });
        panel1.add(rSMaterialButtonRectangle11, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 460, 130, 40));

        tblItem.setBackground(new java.awt.Color(0, 0, 51));
        tblItem.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 255, 255), 1, true));
        tblItem.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Title", "Description", "Start Date", "Due Date", "Status"
            }
        ));
        tblItem.setColorBackgoundHead(new java.awt.Color(0, 0, 102));
        tblItem.setColorFilasBackgound1(new java.awt.Color(0, 0, 0));
        tblItem.setColorFilasBackgound2(new java.awt.Color(51, 51, 51));
        tblItem.setColorFilasForeground1(new java.awt.Color(0, 255, 255));
        tblItem.setColorFilasForeground2(new java.awt.Color(0, 255, 255));
        tblItem.setColorForegroundHead(new java.awt.Color(0, 255, 255));
        tblItem.setColorSelBackgound(new java.awt.Color(0, 51, 102));
        tblItem.setColorSelForeground(new java.awt.Color(0, 255, 255));
        tblItem.setFuenteFilas(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tblItem.setFuenteFilasSelect(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        tblItem.setFuenteHead(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        tblItem.setRowHeight(15);
        tblItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblItemMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblItem);

        panel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, 740, 200));

        rSMaterialButtonRectangle12.setBackground(new java.awt.Color(102, 102, 102));
        rSMaterialButtonRectangle12.setForeground(new java.awt.Color(0, 255, 255));
        rSMaterialButtonRectangle12.setText("Edit");
        rSMaterialButtonRectangle12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rSMaterialButtonRectangle12ActionPerformed(evt);
            }
        });
        panel1.add(rSMaterialButtonRectangle12, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 460, 130, 40));

        label25.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        label25.setForeground(new java.awt.Color(0, 255, 255));
        label25.setText("Sort");
        panel1.add(label25, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 110, -1, 30));

        radioButtonDescending.setForeground(new java.awt.Color(0, 255, 255));
        radioButtonDescending.setText("Decending");
        radioButtonDescending.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButtonDescendingActionPerformed(evt);
            }
        });
        panel1.add(radioButtonDescending, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 240, -1, -1));

        radioButtonAscending.setForeground(new java.awt.Color(0, 255, 255));
        radioButtonAscending.setText("Ascending");
        radioButtonAscending.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioButtonAscendingActionPerformed(evt);
            }
        });
        panel1.add(radioButtonAscending, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 210, -1, -1));

        cmbSorting.setBackground(new java.awt.Color(0, 0, 102));
        cmbSorting.setForeground(new java.awt.Color(0, 255, 255));
        cmbSorting.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ID", "Title", "Due Date" }));
        cmbSorting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSortingActionPerformed(evt);
            }
        });
        panel1.add(cmbSorting, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 140, 180, 30));

        label26.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        label26.setForeground(new java.awt.Color(0, 255, 255));
        label26.setText("Title  :");
        panel1.add(label26, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 350, -1, 30));

        label27.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        label27.setForeground(new java.awt.Color(0, 255, 255));
        label27.setText("Status :");
        panel1.add(label27, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 400, -1, 30));

        label28.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        label28.setForeground(new java.awt.Color(0, 255, 255));
        label28.setText("Start Date :");
        panel1.add(label28, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 320, -1, 30));

        label24.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        label24.setForeground(new java.awt.Color(0, 255, 255));
        label24.setText("Due Date :");
        panel1.add(label24, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 360, -1, 30));

        lblID.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        lblID.setForeground(new java.awt.Color(0, 255, 255));
        lblID.setText("1001");
        panel1.add(lblID, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 310, -1, 30));

        label29.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        label29.setForeground(new java.awt.Color(0, 255, 255));
        label29.setText("ID  :");
        panel1.add(label29, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 310, -1, 30));

        txtDescription.setBackground(new java.awt.Color(102, 102, 102));
        txtDescription.setForeground(new java.awt.Color(0, 255, 255));
        txtDescription.setBorderColor(new java.awt.Color(0, 255, 255));
        txtDescription.setBotonColor(new java.awt.Color(0, 255, 255));
        txtDescription.setFont(new java.awt.Font("Yu Gothic UI", 0, 14)); // NOI18N
        txtDescription.setPhColor(new java.awt.Color(0, 255, 255));
        txtDescription.setPlaceholder("Description");
        panel1.add(txtDescription, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 400, 410, 40));

        txtTitle.setBackground(new java.awt.Color(102, 102, 102));
        txtTitle.setForeground(new java.awt.Color(0, 255, 255));
        txtTitle.setBorderColor(new java.awt.Color(0, 255, 255));
        txtTitle.setBotonColor(new java.awt.Color(0, 255, 255));
        txtTitle.setFont(new java.awt.Font("Yu Gothic UI", 0, 14)); // NOI18N
        txtTitle.setPhColor(new java.awt.Color(0, 255, 255));
        txtTitle.setPlaceholder("Tittle");
        panel1.add(txtTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 350, 410, 40));

        dateChooserstartDate.setBackground(new java.awt.Color(153, 153, 153));
        dateChooserstartDate.setBorder(javax.swing.BorderFactory.createMatteBorder(3, 3, 3, 3, new java.awt.Color(0, 255, 255)));
        dateChooserstartDate.setForeground(new java.awt.Color(0, 255, 255));
        panel1.add(dateChooserstartDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 320, 250, 30));

        dateChooserDueDate.setBackground(new java.awt.Color(153, 153, 153));
        dateChooserDueDate.setBorder(javax.swing.BorderFactory.createMatteBorder(3, 3, 3, 3, new java.awt.Color(0, 255, 255)));
        dateChooserDueDate.setForeground(new java.awt.Color(0, 255, 255));
        panel1.add(dateChooserDueDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 360, 250, 30));

        label30.setFont(new java.awt.Font("Georgia", 0, 14)); // NOI18N
        label30.setForeground(new java.awt.Color(0, 255, 255));
        label30.setText("Description :");
        panel1.add(label30, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 400, -1, 30));

        cmbStatus.setBackground(new java.awt.Color(0, 0, 102));
        cmbStatus.setForeground(new java.awt.Color(0, 255, 255));
        cmbStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Complete", "Incomplete" }));
        panel1.add(cmbStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(740, 400, 250, 30));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1073, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panel1, javax.swing.GroupLayout.DEFAULT_SIZE, 561, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rSMaterialButtonRectangle10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rSMaterialButtonRectangle10ActionPerformed
         playnotificationMusic();
         int rowNo = tblItem.getSelectedRow();
    TableModel model = tblItem.getModel();
    
    if (rowNo == -1) {
        JOptionPane.showMessageDialog(this, "Please select a row to mark as complete.", "Selection Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
    
    int id = Integer.parseInt(model.getValueAt(rowNo, 0).toString());

    // Perform the database update
    String sql = "UPDATE task SET currentStates = ? WHERE id = ?";
    Connection con = null;
    PreparedStatement pst = null;

    try {
        con = DBConnection.getConnection();
        pst = con.prepareStatement(sql);
        pst.setString(1, "Complete");
        pst.setInt(2, id);

        pst.executeUpdate();

        JOptionPane.showMessageDialog(this, "Task marked as complete.", "Success", JOptionPane.INFORMATION_MESSAGE);
        tableLoard();

        // Refresh the table data if needed

    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, ex.getMessage());
    } finally {
        try {
            if (pst != null) pst.close();
            
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    }//GEN-LAST:event_rSMaterialButtonRectangle10ActionPerformed

    private void rSMaterialButtonRectangle11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rSMaterialButtonRectangle11ActionPerformed
      
        try {
            playnotificationMusic();
    int result = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this Task?", "Confirmation", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
    
    if (result == JOptionPane.YES_OPTION) {
        String sql = "DELETE FROM task WHERE id = ?";
        Connection con = DBConnection.getConnection();
        PreparedStatement pst = con.prepareStatement(sql);
        pst.setString(1, lblID.getText());
        pst.executeUpdate();
        playnotificationMusic();
        JOptionPane.showMessageDialog(this, "<html><body><h2>Successfully deleted!</h2>"
                + "<p>The Task has been deleted successfully.</p></body></html>", "Deletion Successful", JOptionPane.INFORMATION_MESSAGE);
        
        tableLoard();
    }
} catch (Exception e) {
    JOptionPane.showMessageDialog(this, e.getMessage());
}
    }//GEN-LAST:event_rSMaterialButtonRectangle11ActionPerformed

    private void tblItemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblItemMouseClicked
          int rowNo = tblItem.getSelectedRow();
            TableModel model = tblItem.getModel();
            
            lblID.setText(model.getValueAt(rowNo, 0).toString());
            txtTitle.setText(model.getValueAt(rowNo, 1).toString());
            txtDescription.setText(model.getValueAt(rowNo, 2).toString());
             dateChooserstartDate.setDate((Date) model.getValueAt(rowNo, 3)); // Assuming the JDateChooser is named dateChooserstartDate
             dateChooserDueDate.setDate((Date) model.getValueAt(rowNo, 4)); // Assuming the JDateChooser is named dateChooserDueDate
             cmbStatus.setSelectedItem(model.getValueAt(rowNo, 5).toString());
              
            
            
    }//GEN-LAST:event_tblItemMouseClicked

    private void rSMaterialButtonRectangle12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rSMaterialButtonRectangle12ActionPerformed
         int id = Integer.parseInt(lblID.getText());
    String title = txtTitle.getText();
    String description = txtDescription.getText();
    Date startDate = dateChooserstartDate.getDate();
    Date dueDate = dateChooserDueDate.getDate();
    String states = cmbStatus.getSelectedItem().toString();
    
    Connection con = null;
    PreparedStatement pst = null;
    
    try {
        con = DBConnection.getConnection();
        String sql = "UPDATE task SET title = ?, description = ?, startDate = ?, dueDate = ?, currentStates=? WHERE id = ?";
        pst = con.prepareStatement(sql);
        pst.setString(1, title);
        pst.setString(2, description);
        pst.setDate(3, new java.sql.Date(startDate.getTime()));
        pst.setDate(4, new java.sql.Date(dueDate.getTime()));
        pst.setString(5,states);
        pst.setInt(6, id);

        pst.executeUpdate();

        JOptionPane.showMessageDialog(this, "Task updated successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
        tableLoard();

        // Refresh the table data if needed

    } catch (SQLException ex) {
        JOptionPane.showMessageDialog(this, ex.getMessage());
    } finally {
        try {
            if (pst != null) pst.close();
           
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    }//GEN-LAST:event_rSMaterialButtonRectangle12ActionPerformed

    private void radioButtonDescendingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioButtonDescendingActionPerformed
        if (radioButtonDescending.isSelected()) {
        selectedOrder = "DESC";
        radioButtonAscending.setSelected(false);
    } else if (radioButtonAscending.isSelected()) {
        selectedOrder = "ASC";
        radioButtonDescending.setSelected(false);
    }
    // Reload table data with updated criteria and order
    loadTableData();
    }//GEN-LAST:event_radioButtonDescendingActionPerformed

    private void radioButtonAscendingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioButtonAscendingActionPerformed
        // Update selected sorting order
    if (radioButtonAscending.isSelected()) {
        selectedOrder = "ASC";
        radioButtonDescending.setSelected(false);
    } else if (radioButtonDescending.isSelected()) {
        selectedOrder = "DESC";
        radioButtonAscending.setSelected(false);
    }
    // Reload table data with updated criteria and order
    loadTableData();
    }//GEN-LAST:event_radioButtonAscendingActionPerformed

    private void cmbSortingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSortingActionPerformed
          // Update selected sorting criteria
    selectedCriteria = cmbSorting.getSelectedItem().toString();
    // Reload table data with updated criteria and order
    loadTableData();
    }//GEN-LAST:event_cmbSortingActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cmbSorting;
    private javax.swing.JComboBox<String> cmbStatus;
    private com.toedter.calendar.JDateChooser dateChooserDueDate;
    private com.toedter.calendar.JDateChooser dateChooserstartDate;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane2;
    private java.awt.Label label24;
    private java.awt.Label label25;
    private java.awt.Label label26;
    private java.awt.Label label27;
    private java.awt.Label label28;
    private java.awt.Label label29;
    private java.awt.Label label30;
    private java.awt.Label label8;
    private java.awt.Label lblID;
    private java.awt.Panel panel1;
    private rojerusan.RSMaterialButtonRectangle rSMaterialButtonRectangle10;
    private rojerusan.RSMaterialButtonRectangle rSMaterialButtonRectangle11;
    private rojerusan.RSMaterialButtonRectangle rSMaterialButtonRectangle12;
    private javax.swing.JRadioButton radioButtonAscending;
    private javax.swing.JRadioButton radioButtonDescending;
    private rojerusan.RSTableMetro tblItem;
    private rojerusan.RSMetroTextPlaceHolder txtDescription;
    private rojerusan.RSMetroTextPlaceHolder txtTitle;
    // End of variables declaration//GEN-END:variables
}
